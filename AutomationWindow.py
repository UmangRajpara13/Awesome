# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'EditWindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QAction
from PyQt5.QtGui import QIcon
from AppsList import AppBar
from LoadAppWidget import LoadAppWidget
from MiniWindow import Ui_MiniWindow
from fbs_runtime.application_context.PyQt5 import ApplicationContext

class Ui_AutomationWindow(QtWidgets.QMainWindow):
    def setupUi(self):
        #Developer defined
        self.openAppsObjects = []
        self.appBarObjects = []
        self.openAppsCount = 0
        self.appctxt = ApplicationContext()       # 1. Instantiate ApplicationContext
        self.Apps = self.appctxt.get_resource('Apps')
        self.icons = self.appctxt.get_resource('icons')

        #reimplemented
        self.resize(700, 700)
        self.setObjectName("Awesome")

        # this is master style sheet affecting all child widgets
        self.setStyleSheet("background-color: #333;\n"
                           "color: #00FF00;\n"
"                           font-family: Courier;")

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName("verticalLayout")

        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setObjectName("stackedWidget")

        self.verticalLayout.addWidget(self.stackedWidget)
        self.LoadAppBarUi()
        self.LoadToolBarUi()
        self.setCentralWidget(self.centralwidget)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("Awesome", "Awesome"))
        # self.homeApps.setSortingEnabled(True)


    def RefreashHomeApps(self):
        self.homeApps.clear()
        self.homeApps.SetupAllApps()
        self.homeApps.itemPressed.connect(self.openApp)

    def LoadAppBarUi(self):
        self.appBar = AppBar(self)
        self.appBar.SetupAppBarApps()
        self.appBar.itemPressed.connect(self.switch)

    def LoadToolBarUi(self):

        self.toolBar = QtWidgets.QToolBar(self)
        self.toolBar.setStyleSheet("height : 50px;")
        self.toolBar.setObjectName("toolBar")
        self.toolBar.setFixedHeight(75)
        self.toolBar.setIconSize(QtCore.QSize(35, 35))

        openAction = QAction(QIcon(self.icons + "/open"), "Ctrl+N", self)
        openAction.setShortcut("Ctrl+N")
        openAction.setStatusTip("Open")
        openAction.triggered.connect(self.Open)

        settingsAction = QAction(QIcon(self.icons + "/settings"), "Ctrl+M", self)
        settingsAction.setShortcut("Ctrl+M")
        settingsAction.triggered.connect(self.Settings)

        infoAction = QAction(QIcon(self.icons + "/info"), "Alt+i", self)
        infoAction.setShortcut("Alt+X")
        infoAction.triggered.connect(self.Info)

        self.toolBar.addAction(openAction)
        self.toolBar.addSeparator()
        self.toolBar.addWidget(self.appBar)
        self.toolBar.addSeparator()
        self.toolBar.addAction(infoAction)
        self.toolBar.addAction(settingsAction)

    ###trigger based
    def openApp(self, item):
        self.home.close()
        self.appNameText = item.text()

        if (self.appBar.findItems(str(item.text()), QtCore.Qt.MatchFlag.MatchExactly) == []):
            self.openAppsObjects.append(None)
            self.openAppsObjects[self.openAppsCount] = LoadAppWidget(self)
            self.stackedWidget.setCurrentIndex(self.stackedWidget.addWidget(self.openAppsObjects[self.openAppsCount]))
            if item.text() != "New":
                self.openAppsObjects[self.openAppsCount].DeSerializeJson(self.openAppsObjects[self.openAppsCount].data)
                self.openAppsObjects[self.openAppsCount].CreateAttributes()

            if item.text() == "New":
                self.openAppsObjects[self.stackedWidget.currentIndex()].appName = "New"

            app = self.openAppsObjects[self.stackedWidget.currentIndex()].appName
            appicon = self.Apps + "/" + app + "/icon/" + app
            self.appBarObjects.append(None)
            self.appBarObjects[self.openAppsCount] = QtWidgets.QListWidgetItem(QIcon(appicon), app)
            self.appBar.insertItem(self.stackedWidget.currentIndex(), self.appBarObjects[self.openAppsCount])
            self.appBar.setCurrentRow(self.openAppsCount)
            self.openAppsCount += 1

    def Open(self):

        self.home = Ui_MiniWindow(self)
        self.home.LoadHomeApps()
        self.home.appList.itemDoubleClicked.connect(self.openApp)
        self.home.show()

    def Settings(self):
        #create or edit a json file
        pass

    def switch(self, item):
        self.stackedWidget.setCurrentIndex(self.appBar.row(item))

    def Info(self):
        pass
